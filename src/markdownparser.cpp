#include <QByteArray>
#include <QRegularExpression>

#include "html2md.h"
#include "markdownparser.h"
#include "md4c-html.h"

const QByteArray templateArray = QByteArrayLiteral("<!DOCTYPE html>\n"
                                                   "<html>\n"
                                                   "<head>\n"
                                                   "<title>HTML generated by md4c</title>\n"
                                                   "</head>\n"
                                                   "<body class=\"preview\">\n");

void captureHtmlFragment(const MD_CHAR *data, MD_SIZE data_size, void *userData)
{
    auto *array = static_cast<QByteArray *>(userData);

    array->append(data, (int) data_size);
}

auto Parser::toHtml(const QString &in, const int dia) -> QString
{
#if MD_UNDERLINE
    unsigned parser_flags = MD_FLAG_UNDERLINE;
#else
    unsigned parser_flags = 0;
#endif

    if (dia == GitHub)
        parser_flags |= MD_DIALECT_GITHUB;
    else
        parser_flags |= MD_DIALECT_COMMONMARK;

    const QByteArray array = in.toUtf8(); // Use UTF-8 for better support
    QByteArray out = templateArray;
    out.reserve(array.size() * 1.28 + 115);

    static MD_TOC_OPTIONS toc;
    toc.depth = 0;
    toc.toc_placeholder = "[TOC]";

    md_html(array.constData(),
            array.size(),
            &captureHtmlFragment,
            &out,
            parser_flags,
            MD_HTML_FLAG_SKIP_UTF8_BOM,
            &toc);

    out.append("</body>\n"
               "</html>\n");
    out.squeeze();

    return QString::fromUtf8(out);
}

auto Parser::toMarkdown(const QString &in) -> QString
{
    html2md::Options o;

    auto html = in.toStdString();

    html2md::Converter c(html);
    return QString::fromStdString(html2md::Convert(in.toStdString()));
}

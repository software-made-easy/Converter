#include <QByteArray>
#include <QRegularExpression>

#include "common.h"
#include "markdownparser.h"
#include "md4c-html.h"


const QByteArray templateArray = QByteArrayLiteral("<!DOCTYPE html>\n"
                                                    "<html>\n"
                                                    "<head>\n"
                                                    "<title>HTML generated by md4c</title>\n"
                                                    "</head>\n"
                                                    "<body class=\"preview\">\n");


void captureHtmlFragment (const MD_CHAR* data, MD_SIZE data_size, void* userData) {
    auto *array = static_cast<QByteArray*>(userData);

    array->append(data, data_size);
}

auto Parser::toHtml(const QString &in, const int dia) -> QString
{
    const QByteArray array = in.toUtf8(); // Use UTF-8 for better support
    QByteArray out = templateArray;
    out.reserve(array.size() *1.28 + 115);

    md_html(array.constData(), array.size(), &captureHtmlFragment, &out,
            MD_DIALECT_GITHUB, MD_HTML_FLAG_DEBUG);

    out.append("</body>\n"
               "</html>\n");
    out.squeeze();

    return QString::fromUtf8(out);
}

auto Parser::toMarkdown(QString in) -> QString
{
    // replace Windows line breaks
    in.replace(QChar(QChar::LineSeparator), u'\n');

    // remove all null characters
    // we can get those from Google Chrome via the clipboard
    in.remove(QChar(QChar::Null));

    // remove some blocks
    in.remove(
        QRegularExpression(STR("<head.*?>(.+?)<\\/head>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption));

    in.remove(
        QRegularExpression(STR("<script.*?>(.+?)<\\/script>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption));

    in.remove(
        QRegularExpression(STR("<style.*?>(.+?)<\\/style>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption));

    // replace some html tags with markdown
    in.replace(
        QRegularExpression(STR("<strong.*?>(.+?)<\\/strong>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("**\\1**"));
    in.replace(
        QRegularExpression(STR("<b.*?>(.+?)<\\/b>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("**\\1**"));
    in.replace(
        QRegularExpression(STR("<em.*?>(.+?)<\\/em>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("*\\1*"));
    in.replace(
        QRegularExpression(STR("<i.*?>(.+?)<\\/i>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("*\\1*"));
    in.replace(
        QRegularExpression(STR("<pre.*?>(.+?)<\\/pre>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n```\n\\1\n```\n"));
    in.replace(
        QRegularExpression(STR("<code.*?>(.+?)<\\/code>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n```\n\\1\n```\n"));
    in.replace(
        QRegularExpression(STR("<h1.*?>(.+?)<\\/h1>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n# \\1\n"));
    in.replace(
        QRegularExpression(STR("<h2.*?>(.+?)<\\/h2>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n## \\1\n"));
    in.replace(
        QRegularExpression(STR("<h3.*?>(.+?)<\\/h3>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n### \\1\n"));
    in.replace(
        QRegularExpression(STR("<h4.*?>(.+?)<\\/h4>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n#### \\1\n"));
    in.replace(
        QRegularExpression(STR("<h5.*?>(.+?)<\\/h5>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n##### \\1\n"));
    in.replace(
        QRegularExpression(STR("<h6.*?>(.+?)<\\/h6>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n###### \\1\n"));
    in.replace(
        QRegularExpression(STR("<li.*?>(.+?)<\\/li>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("- \\1\n"));
    in.replace(QRegularExpression(STR("<br.*?>"),
                                    QRegularExpression::CaseInsensitiveOption),
                 STR("\n"));
    in.replace(QRegularExpression(
                     STR("<a[^>]+href=\"(.+?)\".*?>(.+?)<\\/a>"),
                     QRegularExpression::CaseInsensitiveOption |
                         QRegularExpression::DotMatchesEverythingOption),
                 STR("[\\2](\\1)"));
    in.replace(
        QRegularExpression(STR("<p.*?>(.+?)</p>"),
                           QRegularExpression::CaseInsensitiveOption |
                               QRegularExpression::DotMatchesEverythingOption),
        STR("\n\n\\1\n\n"));

    // replace multiple line breaks
    in.replace(QRegularExpression(STR("\n\n+")),
                 STR("\n\n"));

    return in.trimmed();
}
